---
apiVersion: v1
kind: Secret
metadata:
  name: rke2-update-script
  namespace: rke2-update-so
type: Opaque
stringData:
  rke2-update.sh: |
    #!/bin/bash
    # Atualiza o sistema
    echo -e "\e[33mAtualizando o Sistema Operacional..\e[0m"
    zypper ref
    zypper -n patch
    zypper -n up
    # Salva a saída do comando zypper ps -sss em uma variável
    echo -e "\e[1m\e[33mVerificando se alguns serviços precisam serem reiniciados e se o arquivo reboot-needed está presente, indicando a necessidade de uma reinicialização...\e[0m"
    echo
    echo
    # Verifica se alguns serviços precisam ser reiniciados
    services_need_reboot=$(zypper ps -sss)
    if [ -n "$services_need_reboot" ]; then
      echo -e "\e[31mExiste(m) serviço(s) que precisa(m) de reboot:
    $services_need_reboot\e[0m"
      echo
    else
      echo -e "\e[32mNão existem serviços que precisam de reboot.\e[0m"
      echo
    fi
    #Verifica se o arquivo /var/run/reboot-needed existe
    if [ -f /var/run/reboot-needed ] || [ -n "$services_need_reboot" ]; then
      # Realiza o reboot do sistema operacional
      echo -e "\e[31mO arquivo reboot-needed existe.\e[0m"
      echo
    else
      # Não realiza o reboot do sistema operacional
      echo -e "\e[32mO arquivo reboot-needed não existe.\e[0m"
      echo
    fi
    # Realiza o reboot se uma das condições acima for verdadeira
    if [ -f /var/run/reboot-needed ] || [ -n "$services_need_reboot" ]; then
      echo -e "\e[31m\e[1mO Sistema Operacional será reinicializado agora.\e[0m"
      shutdown -r +1
    else
      echo -e "\e[32m\e[1mNão é necessário reiniciar o sistema operacional.\e[0m"
    fi
---
apiVersion: upgrade.cattle.io/v1
kind: Plan
metadata:
  name: rke2-update-so
  namespace: rke2-update-so
spec:
  concurrency: 1
  tolerations:
  - {key: node-role.kubernetes.io/etcd, operator: Exists, effect: NoExecute}
  - {key: node-role.kubernetes.io/control-plane, operator: Exists, effect: NoSchedule}
  prepare:
    image: registry.suse.com/bci/bci-base:latest
    #command: [sh,-c]
    #args: ["zypper -n in iputils; sleep 240; for server in rancher1-rke2.neuhauss.com.br rancher2-rke2.neuhauss.com.br rancher3-rke2.neuhauss.com.br; do echo -e 'Checando a disponibilidade do servidor $server'; while ! ping -c 3 $server -W 10m; do echo -e 'Nenhuma resposta do servidor $server'; sleep 5; done; echo -e 'O servidor $server está disponível.'; done; echo 'O nó está pronto para o Drain.'\n"]
    command:
    - "/bin/sh"
    - "-c"
    args:
    - |
      tempo=120
      zypper -n in iputils
      echo -e "\e[31m\e[1mO drain do nó será realizado daqui a $((tempo / 60)) minutos, aguarde enquanto isso.\e[0m"
      sleep $tempo
      #Adicionar os nomes dos servidores que serão verificados no Cluster.
      for server in 192.168.20.84 192.168.20.85 192.168.20.89; do
        echo -e "\e[1m\e[33mChecando a disponibilidade do servidor "$server"\e[0m"
        while ! ping -c 5 $server; do
          echo -e "\e[31m\e[1mNenhuma resposta do servidor "$server"\e[0m"
          sleep 5
        done
        echo -e "\e[32m\e[1mO servidor "$server" está disponível.\e[0m"
      done
      echo -e "\e[32m\e[1mO nó está pronto para o Drain.\e[0m"
  nodeSelector:
    matchExpressions:
    - {key: skip-rke2-update, operator: DoesNotExist}
  serviceAccountName: system-upgrade
  secrets:
    - name: rke2-update-script
      path: /host/run/system-upgrade/secrets/update
  drain:
    force: false
  version: sles-23-10-2024
  upgrade:
    image: registry.suse.com/bci/bci-base:latest
    command: ["chroot", "/host"]
    args: ["sh", "/run/system-upgrade/secrets/update/rke2-update.sh"]
